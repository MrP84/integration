// breakpoints
$screen-s-breakpoint-max: 479px;
$screen-m-breakpoint-max: 719px;
$screen-l-breakpoint-max: 999px;

$screen-m-breakpoint-min: $screen-s-breakpoint-max + 1;
$screen-l-breakpoint-min: $screen-m-breakpoint-max + 1;
$screen-xl-breakpoint-min: $screen-l-breakpoint-max + 1;


// columns
$screen-s-columns: 4;
$screen-m-columns: 8;
$screen-l-columns: 12;


// rules
// @import "libs/neat/neat-helpers"; // required for new-breakpoint()
$screen-s-rule-max: new-breakpoint(max-width $screen-s-breakpoint-max);
$screen-m-rule-max: new-breakpoint(max-width $screen-m-breakpoint-max);
$screen-l-rule-max: new-breakpoint(max-width $screen-l-breakpoint-max);

$screen-m-rule-min: new-breakpoint(min-width $screen-m-breakpoint-min);
$screen-l-rule-min: new-breakpoint(min-width $screen-l-breakpoint-min);
$screen-xl-rule-min: new-breakpoint(min-width $screen-xl-breakpoint-min);


// mixins
@mixin media-min($breakpoint: M, $html-class: null) {
    $rule: new-breakpoint(min-width $layout-width-min);

    @if $breakpoint == M {
        $rule: $screen-m-rule-min;
    }
    @else if $breakpoint == L {
        $rule: $screen-l-rule-min;
    }
    @else if $breakpoint == XL {
        $rule: $screen-xl-rule-min;
    }
    @else {
        $rule: new-breakpoint(min-width $breakpoint);
    }

    @include media($rule) {
        @if $html-class {
            html.#{$html-class} & {
                @content;
            }
        } @else {
            @content;
        }
    }
}

@mixin media-max($breakpoint: M, $html-class: null) {
    $rule: new-breakpoint(max-width $layout-width-max);

    @if $breakpoint == S {
        $rule: $screen-s-rule-max;
    }
    @else if $breakpoint == M {
        $rule: $screen-m-rule-max;
    }
    @else if $breakpoint == L {
        $rule: $screen-l-rule-max;
    }
    @else {
        $rule: new-breakpoint(max-width $breakpoint);
    }

    @include media($rule) {
        @if $html-class {
            html.#{$html-class} & {
                @content;
            }
        } @else {
            @content;
        }
    }
}

@mixin media-min-max($breakpoint-min: M, $breakpoint-max: L, $html-class: null) {

    @if $breakpoint-min == M {
        $breakpoint-min: $screen-m-breakpoint-min;
    }
    @else if $breakpoint-min == L {
        $breakpoint-min: $screen-l-breakpoint-min;
    }

    @if $breakpoint-max == M {
        $breakpoint-max: $screen-m-breakpoint-max;
    }
    @else if $breakpoint-max == L {
        $breakpoint-max: $screen-l-breakpoint-max;
    }

    @include media(min-width $breakpoint-min max-width $breakpoint-max) {
        @if $html-class {
            html.#{$html-class} & {
                @content;
            }
        } @else {
            @content;
        }
    }
}


// Usage example
// container {
//     // WARNING: the mixin needs to be referenced INSIDE at least one container selector
//     @include media-min(M, svg) {
//         test {
//             background: transparent;
//         }
//     }
// }


// density media query
@mixin media-density($density: 1.3, $type: min, $dimension: width, $breakpoint: null) {
    $viewport-rule: '';

    @if $breakpoint {
        $viewport-rule: ' and (#{$type}-#{$dimension}: #{$breakpoint})';
    }

    $rule: 'only screen and (-webkit-min-device-pixel-ratio: #{$density})' + $viewport-rule;
    // $rule: $rule + ', only screen and (min--moz-device-pixel-ratio: #{$density})' + $viewport-rule;
    // $rule: $rule + ', only screen and (-o-min-device-pixel-ratio: #{$density})' + $viewport-rule;
    $rule: $rule + ', only screen and (min-device-pixel-ratio: #{$density})' + $viewport-rule;
    $rule: $rule + ', only screen and (min-resolution: #{round($density*96)}dpi)' + $viewport-rule;
    $rule: $rule + ', only screen and (min-resolution: #{$density}dppx)' + $viewport-rule;

    @media #{$rule} {
        @content;
    }
}
